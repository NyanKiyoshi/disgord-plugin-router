// Code generated by MockGen. DO NOT EDIT.
// Source: client.go

// Package mock_drouter is a generated GoMock package.
package mocked_disgord

import (
	disgord "github.com/andersfylling/disgord"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockrouterClient is a mock of routerClient interface
type MockrouterClient struct {
	ctrl     *gomock.Controller
	recorder *MockrouterClientMockRecorder
}

// MockrouterClientMockRecorder is the mock recorder for MockrouterClient
type MockrouterClientMockRecorder struct {
	mock *MockrouterClient
}

// NewMockrouterClient creates a new mock instance
func NewMockrouterClient(ctrl *gomock.Controller) *MockrouterClient {
	mock := &MockrouterClient{ctrl: ctrl}
	mock.recorder = &MockrouterClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockrouterClient) EXPECT() *MockrouterClientMockRecorder {
	return m.recorder
}

// On mocks base method
func (m *MockrouterClient) On(event string, inputs ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{event}
	for _, a := range inputs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "On", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// On indicates an expected call of On
func (mr *MockrouterClientMockRecorder) On(event interface{}, inputs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{event}, inputs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "On", reflect.TypeOf((*MockrouterClient)(nil).On), varargs...)
}

// CreateChannelMessage mocks base method
func (m *MockrouterClient) CreateChannelMessage(channelID disgord.Snowflake, params *disgord.CreateMessageParams) (*disgord.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateChannelMessage", channelID, params)
	ret0, _ := ret[0].(*disgord.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateChannelMessage indicates an expected call of CreateChannelMessage
func (mr *MockrouterClientMockRecorder) CreateChannelMessage(channelID, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChannelMessage", reflect.TypeOf((*MockrouterClient)(nil).CreateChannelMessage), channelID, params)
}
