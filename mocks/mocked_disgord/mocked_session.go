// Code generated by MockGen. DO NOT EDIT.
// Source: session.go

// Package mock_drouter is a generated GoMock package.
package mocked_disgord

import (
	disgord "github.com/andersfylling/disgord"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockclientSession is a mock of clientSession interface
type MockclientSession struct {
	ctrl     *gomock.Controller
	recorder *MockclientSessionMockRecorder
}

// MockclientSessionMockRecorder is the mock recorder for MockclientSession
type MockclientSessionMockRecorder struct {
	mock *MockclientSession
}

// NewMockclientSession creates a new mock instance
func NewMockclientSession(ctrl *gomock.Controller) *MockclientSession {
	mock := &MockclientSession{ctrl: ctrl}
	mock.recorder = &MockclientSessionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockclientSession) EXPECT() *MockclientSessionMockRecorder {
	return m.recorder
}

// SendMsg mocks base method
func (m *MockclientSession) SendMsg(channelID disgord.Snowflake, message *disgord.Message) (*disgord.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", channelID, message)
	ret0, _ := ret[0].(*disgord.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendMsg indicates an expected call of SendMsg
func (mr *MockclientSessionMockRecorder) SendMsg(channelID, message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockclientSession)(nil).SendMsg), channelID, message)
}

// SendMsgString mocks base method
func (m *MockclientSession) SendMsgString(channelID disgord.Snowflake, content string) (*disgord.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsgString", channelID, content)
	ret0, _ := ret[0].(*disgord.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendMsgString indicates an expected call of SendMsgString
func (mr *MockclientSessionMockRecorder) SendMsgString(channelID, content interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsgString", reflect.TypeOf((*MockclientSession)(nil).SendMsgString), channelID, content)
}
